                local Fluent =
                    loadstring(
                    game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua")
                )()

                local SaveManager =
                    loadstring(
                    game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua")
                )()

                local InterfaceManager =
                    loadstring(
                    game:HttpGet(
                        "https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"
                    )
                )()

                function Init()
                    local Fluent =
                        loadstring(
                        game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua")
                    )()
                end

                function Test()
                    print(Fluent.Options)
                end

                Init()
                Test()

                local Window =
                    Fluent:CreateWindow(
                    {
                        Title = "NexusZ | Feast",
                        SubTitle = "0.0.1",
                        TabWidth = 160,
                        Size = UDim2.fromOffset(500, 350),
                        Acrylic = true,
                        Theme = "Dark"
                    }
                )

                local Options = Fluent.Options

                Fluent:Notify(
                    {
                        Title = "Welcome to NexusZ",
                        Content = "Thanks for using NexusZ!",
                        SubContent = "",
                        Duration = 7
                    }
                )

                local Tabs = {
                    Tab1 = Window:AddTab({Title = "Home", Icon = "info"}),
                    Tab2 = Window:AddTab({Title = "Local Player", Icon = "user"}),
                    Tab3 = Window:AddTab({Title = "Combat", Icon = "sword"}),
                    Tab4 = Window:AddTab({Title = "Mobility", Icon = "rbxassetid://18949377717"}),
                    Tab5 = Window:AddTab({Title = "Teleport", Icon = "rbxassetid://9283903067"}),
                    Tab7 = Window:AddTab({Title = "Random Scripts", Icon = "rbxassetid://9283903067"}),
                    Settings = Window:AddTab({Title = "Settings", Icon = "settings"})
                }

                local Section = Tabs.Tab1:AddSection("Developed by")

                local Section = Tabs.Tab7:AddSection("Inf yield")

                Tabs.Tab1:AddParagraph(
                    {
                        Title = "oldman_error69",
                        Content = ""
                    }
                )
                Tabs.Tab1:AddParagraph(
                    {
                        Title = "Shazain",
                        Content = ""
                    }
                )

                local Section = Tabs.Tab1:AddSection("Discord manager")

                Tabs.Tab1:AddParagraph(
                    {
                        Title = "ahmed645, Tripp",
                        Content = ""
                    }
                )

                local discordServerLink = "https://discord.gg/gVdSjH4Nzc"

                Tabs.Tab1:AddButton(
                    {
                        Title = "Copy Discord Link",
                        Description = "",
                        Callback = function()
                            setclipboard(discordServerLink)
                        end
                    }
                )

                local Section = Tabs.Tab2:AddSection("Local Player")

                local ToggleNoclip = Tabs.Tab2:AddToggle("NoclipToggle", {Title = "NoClip", Default = false})
                local NoclipConnection = nil
                local Clip = false
                local OriginalCollisions = {}

                local function noclip()
                    Clip = false
                    local function Nocl()
                        if not Clip and game.Players.LocalPlayer.Character then
                            for _, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                                if v:IsA("BasePart") and v.CanCollide then
                                    OriginalCollisions[v] = v.CanCollide
                                    v.CanCollide = false
                                end
                            end
                        end
                        wait(0.21)
                    end
                    NoclipConnection = game:GetService("RunService").Stepped:Connect(Nocl)
                end

                local function clip()
                    if NoclipConnection then
                        NoclipConnection:Disconnect()
                        NoclipConnection = nil
                    end
                    Clip = true
                    for part, collision in pairs(OriginalCollisions) do
                        if part and part:IsA("BasePart") then
                            part.CanCollide = collision
                        end
                    end
                    OriginalCollisions = {}
                end

                ToggleNoclip:OnChanged(
                    function(value)
                        if value then
                            noclip()
                        else
                            clip()
                        end
                        print("Noclip Toggle changed:", value)
                    end
                )

                local runService = game:GetService("RunService")
                local lplr = game.Players.LocalPlayer

                local speedVal = 20

                local noSlowEnabled = false
                local flyEnabled = false

                local function onHeartbeat(dt)
                    if not noSlowEnabled then
                        return
                    end

                    if flyEnabled then
                        return
                    end

                    if not lplr.Character or not lplr.Character:FindFirstChild("Humanoid") then
                        return
                    end

                    local humanoid = lplr.Character.Humanoid
                    local humanoidRootPart = lplr.Character:FindFirstChild("HumanoidRootPart")

                    if not humanoidRootPart then
                        return
                    end

                    humanoid.WalkSpeed = speedVal

                    local currentVelocity = humanoidRootPart.Velocity
                    local verticalVelocity = Vector3.new(0, currentVelocity.Y, 0)

                    local moveDirection = humanoid.MoveDirection
                    if moveDirection.Magnitude > 0 then
                        local horizontalVelocity = moveDirection * speedVal
                        humanoidRootPart.Velocity = horizontalVelocity + verticalVelocity
                    end
                end

                local function setNoSlowEnabled(enabled)
                    noSlowEnabled = enabled
                end

                runService.Heartbeat:Connect(onHeartbeat)

                local Section = Tabs.Tab3:AddSection("Hitbox")

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local headSize = Vector3.new(2, 2, 2) -- Adjust this to set the default head size
local headColor = BrickColor.new("Medium stone grey")
local isHeadExtended = false

local function modifyHead(head, size, transparency, color, material, canCollide)
    head.Size = size
    head.Transparency = transparency
    head.BrickColor = color
    head.Material = material
    head.CanCollide = canCollide
end

local function applyHeadModifications(player)
    if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
        modifyHead(player.Character.Head, headSize, 0.5, headColor, "Neon", false)
    end
end

local function revertHeadModifications(player)
    if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
        modifyHead(player.Character.Head, Vector3.new(1, 1, 1), 1, BrickColor.new("Medium stone grey"), "Plastic", true)
    end
end

local function onCharacterAdded(character)
    if isHeadExtended then
        applyHeadModifications(LocalPlayer)
    end
end

local function onPlayerAdded(player)
    player.CharacterAdded:Connect(function(character)
        character:WaitForChild("Head")
        if isHeadExtended then
            applyHeadModifications(player)
        end
    end)
    player.CharacterRemoving:Connect(function(character)
        if isHeadExtended then
            revertHeadModifications(player)
        end
    end)
end

for _, player in ipairs(Players:GetPlayers()) do
    onPlayerAdded(player)
end

Players.PlayerAdded:Connect(onPlayerAdded)

Players.PlayerRemoving:Connect(function(player)
    if isHeadExtended then
        revertHeadModifications(player)
    end
end)

LocalPlayer.CharacterAdded:Connect(function(character)
    if isHeadExtended then
        applyHeadModifications(LocalPlayer)
    end
end)

LocalPlayer.CharacterRemoving:Connect(function(character)
    if isHeadExtended then
        revertHeadModifications(LocalPlayer)
    end
end)

local Toggle = Tabs.Tab3:AddToggle(
    "MyToggle",
    {
        Title = "Head Size Extender",
        Description = "6 is the best.",
        Default = false,
        Callback = function(state)
            isHeadExtended = state
            for _, player in ipairs(Players:GetPlayers()) do
                if state then
                    applyHeadModifications(player)
                else
                    revertHeadModifications(player)
                end
            end
        end
    }
)

local sizeSlider = Tabs.Tab3:AddSlider(
    "SizeSlider",
    {
        Title = "Head Size",
        Min = 1,
        Max = 100,
        Default = 6,
        Rounding = 1,
        Callback = function(value)
            headSize = Vector3.new(value, value, value)
            if isHeadExtended then
                for _, player in ipairs(Players:GetPlayers()) do
                    applyHeadModifications(player)
                end
            end
        end
    }
)

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local torsoSize = Vector3.new(2, 1.5, 1) -- Adjust this to set the default torso size
local torsoColor = BrickColor.new("Medium stone grey")
local isTorsoExtended = false

local function modifyTorso(torso, size, transparency, color, material, canCollide)
    torso.Size = size
    torso.Transparency = transparency
    torso.BrickColor = color
    torso.Material = material
    torso.CanCollide = canCollide
end

local function applyTorsoModifications(player)
    if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("UpperTorso") then
        modifyTorso(player.Character.UpperTorso, torsoSize, 0.5, torsoColor, "Neon", false)
    end
end

local function revertTorsoModifications(player)
    if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("UpperTorso") then
        modifyTorso(player.Character.UpperTorso, Vector3.new(1, 2, 1), 1, BrickColor.new("Medium stone grey"), "Plastic", true)
    end
end

local function onCharacterAdded(character)
    if isTorsoExtended then
        applyTorsoModifications(LocalPlayer)
    end
end

local function onPlayerAdded(player)
    player.CharacterAdded:Connect(function(character)
        character:WaitForChild("UpperTorso")
        if isTorsoExtended then
            applyTorsoModifications(player)
        end
    end)
    player.CharacterRemoving:Connect(function(character)
        if isTorsoExtended then
            revertTorsoModifications(player)
        end
    end)
end

for _, player in ipairs(Players:GetPlayers()) do
    onPlayerAdded(player)
end

Players.PlayerAdded:Connect(onPlayerAdded)

Players.PlayerRemoving:Connect(function(player)
    if isTorsoExtended then
        revertTorsoModifications(player)
    end
end)

LocalPlayer.CharacterAdded:Connect(function(character)
    if isTorsoExtended then
        applyTorsoModifications(LocalPlayer)
    end
end)

LocalPlayer.CharacterRemoving:Connect(function(character)
    if isTorsoExtended then
        revertTorsoModifications(LocalPlayer)
    end
end)

local Toggle = Tabs.Tab3:AddToggle(
    "MyToggle",
    {
        Title = "Torso Size Extender",
        Description = "6 is the best",
        Default = false,
        Callback = function(state)
            isTorsoExtended = state
            for _, player in ipairs(Players:GetPlayers()) do
                if state then
                    applyTorsoModifications(player)
                else
                    revertTorsoModifications(player)
                end
            end
        end
    }
)

local sizeSlider = Tabs.Tab3:AddSlider(
    "SizeSlider",
    {
        Title = "Torso Size",
        Min = 1,
        Max = 100,
        Default = 6,
        Rounding = 1,
        Callback = function(value)
            torsoSize = Vector3.new(value, value, value)
            if isTorsoExtended then
                for _, player in ipairs(Players:GetPlayers()) do
                    applyTorsoModifications(player)
                end
            end
        end
    }
)

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local hitboxSize = Vector3.new(2, 2, 1)
local hitboxColor = BrickColor.new("Medium stone grey")
local isHitboxExtended = false

local function modifyHumanoidRootPart(humanoidRootPart, size, transparency, color, material, canCollide)
    humanoidRootPart.Size = size
    humanoidRootPart.Transparency = transparency
    humanoidRootPart.BrickColor = color
    humanoidRootPart.Material = material
    humanoidRootPart.CanCollide = canCollide
end

local function applyHitboxModifications(player)
    if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        modifyHumanoidRootPart(player.Character.HumanoidRootPart, hitboxSize, 0.9, hitboxColor, "Neon", false)
    end
end

local function revertHitboxModifications(player)
    if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        modifyHumanoidRootPart(player.Character.HumanoidRootPart, Vector3.new(2, 2, 1), 1, BrickColor.new("Medium stone grey"), "Plastic", true)
    end
end

local function onCharacterAdded(character)
    if isHitboxExtended then
        applyHitboxModifications(LocalPlayer)
    end
end

local function onPlayerAdded(player)
    player.CharacterAdded:Connect(function(character)
        character:WaitForChild("HumanoidRootPart")
        if isHitboxExtended then
            applyHitboxModifications(player)
        end
    end)
    player.CharacterRemoving:Connect(function(character)
        if isHitboxExtended then
            revertHitboxModifications(player)
        end
    end)
end

for _, player in ipairs(Players:GetPlayers()) do
    onPlayerAdded(player)
end

Players.PlayerAdded:Connect(onPlayerAdded)

Players.PlayerRemoving:Connect(function(player)
    if isHitboxExtended then
        revertHitboxModifications(player)
    end
end)

LocalPlayer.CharacterAdded:Connect(function(character)
    if isHitboxExtended then
        applyHitboxModifications(LocalPlayer)
    end
end)

LocalPlayer.CharacterRemoving:Connect(function(character)
    if isHitboxExtended then
        revertHitboxModifications(LocalPlayer)
    end
end)

local Toggle = Tabs.Tab3:AddToggle(
    "MyToggle",
    {
        Title = "HitBox Extender",
        Description = "Have bugs.",
        Default = false,
        Callback = function(state)
            isHitboxExtended = state
            for _, player in ipairs(Players:GetPlayers()) do
                if state then
                    applyHitboxModifications(player)
                else
                    revertHitboxModifications(player)
                end
            end
        end
    }
)

local sizeSlider = Tabs.Tab3:AddSlider(
    "SizeSlider",
    {
        Title = "Hitbox Size",
        Min = 2,
        Max = 70,
        Default = 70,
        Rounding = 1,
        Callback = function(value)
            hitboxSize = Vector3.new(value, value, value)
            if isHitboxExtended then
                for _, player in ipairs(Players:GetPlayers()) do
                    applyHitboxModifications(player)
                end
            end
        end
    }
)


local disablehitbox = Tabs.Tab3:AddButton(
    {
        Title = "Disable HitBox",
        Description = "",
        Callback = function()
            for _, player in ipairs(Players:GetPlayers()) do
                revertHitboxModifications(player)
            end
        end
    }
)

local colorSlider = Tabs.Tab3:AddSlider(
    "ColorSlider",
    {
        Title = "Hitbox Color",
        Min = 1,
        Max = 3,
        Default = 1,
        Rounding = 1,
        Callback = function(value)
            if value == 1 then
                hitboxColor = BrickColor.new("Bright red")
            elseif value == 2 then
                hitboxColor = BrickColor.new("Medium stone grey")
            elseif value == 3 then
                hitboxColor = BrickColor.new("Bright blue")
            end

            if isHitboxExtended then
                for _, player in ipairs(Players:GetPlayers()) do
                    applyHitboxModifications(player)
                end
            end
        end
    }
)


                local Section = Tabs.Tab3:AddSection("Bow Aimbot")

                local player = game.Players.LocalPlayer
                local camera = game.Workspace.CurrentCamera
                local isFollowing = false
                local updateConnection = nil

                local Toggle =
                    Tabs.Tab3:AddToggle(
                    "MyToggle",
                    {
                        Title = "Camlock",
                        Description = "",
                        Default = false,
                        Callback = function(state)
                            local function lockOntoPlayer(targetPlayer)
                                while isFollowing and targetPlayer and targetPlayer.Character and
                                    targetPlayer.Character:FindFirstChild("HumanoidRootPart") do
                                    local targetPosition = targetPlayer.Character.HumanoidRootPart.Position
                                    camera.CFrame = CFrame.new(camera.CFrame.Position, targetPosition)
                                    wait(0.0014)
                                end
                            end

                            local function lockOnToNearestPlayer()
                                local closestPlayer = nil
                                local shortestDistance = math.huge

                                for _, otherPlayer in ipairs(game.Players:GetPlayers()) do
                                    if
                                        otherPlayer ~= player and otherPlayer.Character and
                                            otherPlayer.Character:FindFirstChild("HumanoidRootPart")
                                     then
                                        local distance =
                                            (player.Character.HumanoidRootPart.Position -
                                            otherPlayer.Character.HumanoidRootPart.Position).magnitude
                                        if distance < shortestDistance then
                                            shortestDistance = distance
                                            closestPlayer = otherPlayer
                                        end
                                    end
                                end

                                if closestPlayer then
                                    lockOntoPlayer(closestPlayer)
                                end
                            end

                            if state then
                                isFollowing = true

                                if updateConnection then
                                    updateConnection:Disconnect()
                                    updateConnection = nil
                                end

                                updateConnection =
                                    game:GetService("RunService").RenderStepped:Connect(
                                    function()
                                        if isFollowing then
                                            lockOnToNearestPlayer()
                                        end
                                    end
                                )
                            else
                                isFollowing = false

                                if updateConnection then
                                    updateConnection:Disconnect()
                                    updateConnection = nil
                                end
                            end
                        end
                    }
                )

                local Players = game:GetService("Players")
                local runService = game:GetService("RunService")
                local LocalPlayer = Players.LocalPlayer
                local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

                local speedSection = Tabs.Tab4:AddSection("WalkSpeed")

                local speedOptions = {20, 30, 40, 50, 60}
                local selectedSpeed = 30
                local speedEnabled = false

                local function onHeartbeat(dt)
                    if not speedEnabled then
                        return
                    end

                    if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("Humanoid") then
                        return
                    end

                    local humanoid = LocalPlayer.Character.Humanoid
                    local humanoidRootPart = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")

                    if not humanoidRootPart then
                        return
                    end

                    local moveDirection = humanoid.MoveDirection
                    local factor = selectedSpeed - humanoid.WalkSpeed
                    local multMD = (moveDirection * dt) * factor

                    LocalPlayer.Character:TranslateBy(multMD)
                end

                runService.Heartbeat:Connect(onHeartbeat)

                local Dropdown =
                    speedSection:AddDropdown(
                    "SpeedDropdown",
                    {
                        Title = "Speed",
                        Values = speedOptions,
                        Multi = false,
                        Default = tostring(selectedSpeed),
                        Callback = function(selected)
                            selectedSpeed = tonumber(selected)
                        end
                    }
                )

                speedSection:AddButton(
                    {
                        Title = "Enable",
                        Description = "",
                        Callback = function()
                            speedEnabled = true
                        end
                    }
                )

                speedSection:AddButton(
                    {
                        Title = "Disable",
                        Description = "",
                        Callback = function()
                            speedEnabled = false
                        end
                    }
                )

                local section3 = Tabs.Tab4:AddSection("Fly")

                local runService = game:GetService("RunService")
                local userInputService = game:GetService("UserInputService")
                local localPlayer = game.Players.LocalPlayer
                local camera = workspace.CurrentCamera

                local vars = {
                    invisiblefly = false,
                    playerClone = nil,
                    flySpeed = 8,
                    wasInvisibleFlyEnabled = false
                }

                local function getHumanoid(player)
                    if player.Character then
                        return player.Character:FindFirstChild("Humanoid")
                    end
                end

                local function getRoot(player)
                    if player.Character then
                        return player.Character:FindFirstChild("HumanoidRootPart")
                    end
                end

                local function onInvisibleFlyToggle(value)
                    if vars.invisiblefly and vars.playerClone then
                        vars.playerClone:Destroy()
                        vars.playerClone = nil
                    end

                    vars.invisiblefly = value

                    if value then
                        vars.wasInvisibleFlyEnabled = true
                        repeat
                            wait()
                        until localPlayer.Character

                        vars.playerClone = localPlayer.Character:Clone()
                        vars.playerClone.Parent = workspace

                        while vars.invisiblefly do
                            runService.Heartbeat:Wait()

                            if vars.playerClone and vars.playerClone:FindFirstChild("HumanoidRootPart") then
                                local root = getRoot(localPlayer)
                                local hum = getHumanoid(localPlayer)

                                if not (root and hum and vars.playerClone) then
                                    return
                                end

                                camera.CameraSubject =
                                    vars.playerClone:FindFirstChild("Humanoid") or localPlayer.Character.Humanoid

                                hum:ChangeState("Climbing")
                                localPlayer.Character:PivotTo(vars.playerClone:GetPivot() + Vector3.new(0, 1500, 0))

                                root.Velocity = Vector3.zero

                                local lookPosition = camera.CFrame.Position + camera.CFrame.LookVector * 9999

                                vars.playerClone.HumanoidRootPart.CFrame =
                                    CFrame.new(
                                    vars.playerClone.HumanoidRootPart.Position,
                                    Vector3.new(
                                        lookPosition.X,
                                        vars.playerClone.HumanoidRootPart.Position.Y,
                                        lookPosition.Z
                                    )
                                )
                                vars.playerClone.HumanoidRootPart.Anchored = true

                                vars.playerClone.HumanoidRootPart.CFrame =
                                    CFrame.new(
                                    vars.playerClone.HumanoidRootPart.Position + hum.MoveDirection / 10 * vars.flySpeed,
                                    Vector3.new(
                                        lookPosition.X,
                                        vars.playerClone.HumanoidRootPart.Position.Y,
                                        lookPosition.Z
                                    )
                                )

                                if userInputService:IsKeyDown(Enum.KeyCode.Space) then
                                    vars.playerClone.HumanoidRootPart.CFrame =
                                        CFrame.new(
                                        vars.playerClone.HumanoidRootPart.Position + Vector3.new(0, 0.2, 0),
                                        Vector3.new(
                                            lookPosition.X,
                                            vars.playerClone.HumanoidRootPart.Position.Y,
                                            lookPosition.Z
                                        )
                                    )
                                end

                                if userInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
                                    vars.playerClone.HumanoidRootPart.CFrame =
                                        CFrame.new(
                                        vars.playerClone.HumanoidRootPart.Position - Vector3.new(0, 0.2, 0),
                                        Vector3.new(
                                            lookPosition.X,
                                            vars.playerClone.HumanoidRootPart.Position.Y,
                                            lookPosition.Z
                                        )
                                    )
                                end
                            end
                        end

                        camera.CameraSubject = getHumanoid(localPlayer)

                        if vars.playerClone then
                            localPlayer.Character:PivotTo(vars.playerClone:GetPivot())
                            vars.playerClone:Destroy()
                            vars.playerClone = nil
                        end
                    else
                        if vars.wasInvisibleFlyEnabled then
                            local root = getRoot(localPlayer)
                            if root then
                                local currentCFrame = root.CFrame
                                local newCFrame =
                                    CFrame.new(
                                    currentCFrame.Position.X,
                                    currentCFrame.Position.Y - 1500,
                                    currentCFrame.Position.Z
                                )
                                localPlayer.Character:PivotTo(newCFrame)
                            end
                            vars.wasInvisibleFlyEnabled = false
                        end
                    end
                end

                local ToggleInvisibleFly =
                    Tabs.Tab4:AddToggle(
                    "InvisibleFlyToggle",
                    {
                        Title = "Invisible Fly",
                        Default = false,
                        Callback = function(state)
                            onInvisibleFlyToggle(state)
                        end
                    }
                )

                local section = Tabs.Tab5:AddSection("Teleport")

                local cframes = {
                    CFrame.new(9999, 9999, 9999), --Desert
                    CFrame.new(1513.0150146484375, 14.353964805603027, -239.69000244140625), --Desert Middle
                }

                local function teleport(cframe)
                    local player = game.Players.LocalPlayer
                    local character = player.Character or player.CharacterAdded:Wait()
                    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

                    humanoidRootPart.CFrame = cframe
                end

                local teleportSection = Tabs.Tab5

                local Section = Tabs.Tab5:AddSection("Desert")

                teleportSection:AddButton(
                    {
                        Title = "Desert",
                        Description = "",
                        Callback = function()
                            teleport(cframes[1])
                        end
                    }
                )

                teleportSection:AddButton(
                    {
                        Title = "Desert Middle",
                        Description = "",
                        Callback = function()
                            teleport(cframes[2])
                        end
                    }
                )


                Tabs.Tab7:AddButton(
                    {
                        Title = "Inf Yield",
                        Description = "",
                        Callback = function()
                            loadstring(
                                game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source")
                            )()
                        end
                    }
                )

                local Section = Tabs.Tab7:AddSection("HydraX")

                Tabs.Tab7:AddButton(
                    {
                        Title = "HydraX",
                        Description = "Kill aura doesnt work.",
                        Callback = function()
                            loadstring(
                                game:HttpGet(
                                    "https://raw.githubusercontent.com/XFeastXl/HydraXFree/refs/heads/main/Free"
                                )
                            )()
                        end
                    }
                )

                local Section = Tabs.Tab7:AddSection("CodeCraft")

                Tabs.Tab7:AddButton(
                    {
                        Title = "CodeCraft",
                        Description = "Kill aura doesnt work.",
                        Callback = function()
                            loadstring(
                                game:HttpGet(
                                    "https://raw.githubusercontent.com/XFeastXl/CodeCraftXFeast/refs/heads/main/CodeCraftXTobias"
                                )
                            )()
                        end
                    }
                )

                SaveManager:SetLibrary(Fluent)
                InterfaceManager:SetLibrary(Fluent)

                SaveManager:IgnoreThemeSettings()

                SaveManager:SetIgnoreIndexes({})

                InterfaceManager:SetFolder("FluentScriptHub")
                SaveManager:SetFolder("FluentScriptHub/specific-game")

                InterfaceManager:BuildInterfaceSection(Tabs.Settings)
                SaveManager:BuildConfigSection(Tabs.Settings)

                Window:SelectTab(1)

                Fluent:Notify(
                    {
                        Title = "NexusZ ",
                        Content = "The script has  loaded.",
                        Duration = 8
                    }
                )

                SaveManager:LoadAutoloadConfig()

                local screenGui = Instance.new("ScreenGui")
                screenGui.Parent = game.CoreGui

                local minimizeButton = Instance.new("ImageButton")
                minimizeButton.Size = UDim2.new(0, 50, 0, 50)
                minimizeButton.Position = UDim2.new(0, 10, 1, -80)
                minimizeButton.BackgroundColor3 = Color3.fromRGB(85, 170, 255)
                minimizeButton.Image = "rbxassetid://14252684484"
                minimizeButton.Parent = screenGui

                local uiCorner = Instance.new("UICorner")
                uiCorner.CornerRadius = UDim.new(1, 0)
                uiCorner.Parent = minimizeButton

                minimizeButton.MouseButton1Click:Connect(
                    function()
                        Window:Minimize()
                    end
                )

                local restoreButton = Instance.new("ImageButton")
                restoreButton.Size = UDim2.new(0, 50, 0, 50)
                restoreButton.Position = UDim2.new(0, 10, 1, -80)
                restoreButton.BackgroundColor3 = Color3.fromRGB(85, 170, 255)
                restoreButton.Image = "rbxassetid://14252684484"
                restoreButton.Visible = false
                restoreButton.Parent = screenGui

                restoreButton.MouseButton1Click:Connect(
                    function()
                        Window:Restore()
                    end
                )

                Window.Minimized:Connect(
                    function(isMinimized)
                        minimizeButton.Visible = not isMinimized
                        restoreButton.Visible = isMinimized
                    end
                )